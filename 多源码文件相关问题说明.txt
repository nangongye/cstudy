main()里的代码太长了适合分成几个函数
一个源代码文件太长了适合分成几个文件
两个独立的源代码文件不能编译形成可执行的程序

如何将一个源码文件分成多文件？（dev c++编译器）以一个功能为判断数字大小的源码为例
	首先应将主函数main的相应东西写出来，即
	int main(){
		int a =2;
		printf("%d\n",max(a,gall));
		return 0;
	   }
	这个可以单独做一个文件

	接着把函数max的代码保存到另一个文件
	int max(int a,int b){
		return a>b?a:b;
	}

	最后创建一个c项目，c项目里的c文件可不要，基本没用
	打开项目菜单，添加main和max的文件就OK了
	
	注意：
		1.main和max的文件后缀一定是c
		2.项目和main和max函数的文件一定要在同一个目录


项目
	在dev c++中新建一个项目，然后把几个源代码文件
	加入进去
	
	对于项目，dev c++的编译会把一个项目中所以的源代码
	文件都编译后，链接起来

	有的IDE有分开的编译和构建两个按钮，前提是对
	单个源代码文件编译，后者是对整个项目做链接。


编译单元

	一个.c文件是一个编译单元
	编译器去每次编译只处理一个编译单元


头文件

	把函数原型放到一个头文件（以.h结尾)中，在需要调用这个函数的源代码文件（.c文件）中
	#include这个头文件，就能让编译器在编译的时候知道
	函数的原型。

	例子：
		在上述代码的基础上，创建一个后缀为h的文件
	里面写int max（int a,int b）就可以了。那么在引用的时候，
	只需要#include"max.h"

	在使用和定义这个函数的地方都应该使用#include这个头文件。
因为这样编译器可以帮你检查你这个参数或者调用的函数是不是对的

	一般的做法就是任何.c都有对应的同名的.h，把所有对外公开的函数的原型和全局变量的声明都放进去

	只有声明可以被放在头文件中
		是规则不是法律，如果将定义放在头文件中会产生问题
	
	否则会造成一个项目中多个编译单元里有重名的实体

	*在某些编译器里允许几个编译单元中存在同名的函数，
或者用weak修饰符来强调这种存在




#include
	#include是一个编译预处理指令，和宏一样，在编译之前就处理了

	它把那个文件的全部文本内容原封不动地插入到它所在的地方

	所以也不是一定要在.c文件的最前面#include

预编译中是选择“”还是<>
	#include有两种形式来指出要插入的文件
	  “”要求编译器首先在当前目录（.c文件所在的目录）寻找这个文件，
如果没有，到编译器指定的目录去找

	<>让编译器只在指定的目录去找

	编译器自己知道自己的标准库的头文件在哪里

	环境变量和编译器命令行参数也可以指定寻找头文件的目录


#include的误区

	#include不是用来引入库的，而实际上它只是把后面的文件的内容原封不动
地插入到它当前的那一行

	stdio.h里只有printf的原型，printf的代码在另外的地方，某个.lib（windows）或.a(unix)中

	现在的C语言编译器默认会引入所有的标准库

	#include<stdio.h>只是为了让编译器知道printf函数的原型，
保证你调用时给出的参数值是正确的类型

	

不对外公开的函数
	
	在函数前面加上static就使得它成为只能在所在的编译单元中被使用的函数

	在全局变量前面加上static就使得它只能成为在所在的编译单元中被使用的全局变量

	
声明
	extern可置于变量或者函数前，以表示变量或者函数的定义在别的文件中。提示编译器遇到此变量或函数时，
在其它模块中寻找其定义，另外，extern也可用来进行链接指定。

	int i;//该语句是变量的定义
	extern int i;//该语句是变量的声明


声明和定义	
	声明是不产生代码的东西
		函数原型
		变量声明
		结构声明
		宏声明
		枚举声明
		类型声明
		inline函数

	定义是产生代码的东西


重复声明
	同一个编译单元里，或者说同一个代码文件中，同名的结构不能被重复声明
	
	如果你的头文件里有结构的声明，很难这个头文件不会在一个编译单元里
被#include多次
	
	所以需要标准头文件结构

标准头文件结构

	#ifndef  __LIST_HEAD__//判断下列结构定义是否重复
	#define  __LIST_HEAD__//如果没有该结构，则会定义该结构

	#include "node.h"

	typedef struct _list{
		node *head;
		nodee *tail;
	}list;

	#endif//如果重复则结束该判断

	#pragma once也能起到相同的作用，
但是不是所有的编译器都支持
	
