#开头的是编译预处理指令
它们不是C语言的成分，但是C语言程序离不开它们
#define用来定义一个宏

#define
	#define<名字><值>

	注意没有结尾的分号，因为不是c的语句

	名字必须是一个单词，值可以是各种东西

	在C语言的编译器开始编译之前，编译预处理程序
	会把程序中的名字换成值

	完全的文本替换

没有值的宏
	#define _DUBUG
	
	这类宏是用于条件编译的，后面有其他的编译预处理
指令来检查这个宏是否已经被定义过了


带参数的宏

	#define  cube(x) ( (x) * (x)  *(x) )//cube立方之意
		举例：
			cube(5)  相当于  （（5）*（5）*（5）），
			就是用cube(x)替换了（（x）*（x）*（x））
		
	宏可以带参数

	错误定义的宏
		#define RADTODEG(x) (x * 5.29578)
		#define  RADTODEG（x）(x) * 57.29578
		
		如果按上述定义，代码示例
			#define <stdio.h>
				
			#define RADTODEG1(x)  (x  * 57.29578)
			#define RADTODEG2(x)  (x)  * 57.29578

			int main(){
				printf("%f\n",RADTODEG(5+2));//实际上是5+2*57.20578
				printf("%f\n",180/RADTODEG（1）);//实际上是180/(1)  * 57.29578
				return 0;	
			}
		
	带参数的宏的原则
		一切都要括号
		  整个值要括号
		参数出现的每个地方都要括号
	例：#define RADTODEG(x)    ( (x) * 57.2352)

可以带多个参数
	例如：#define MIN(a,b)   ((a)>(b)?(b):(a))

也可以组合（嵌套）使用其他宏

不要加分号
	#define RETTY_PRINT(msg)printf(msg)
	
		if(n<10)
			RETTY_PRINT("n is less than 10");
		else 
			RETTY_PRINT("n is at least 10");
	

带参数的宏
	在大型程序的代码中使用非常普遍，可以牺牲空间换取效率
	可以非常复杂，如产生函数
	  在#和##这两个运算符的帮助下	
	使用中存在中西方文化
	部分宏会被inline函数取代

其他编译预处理指令
	条件编译
预定义的宏

	__LINE__表示当前代码的行号
	__FILE__表示源代码的文件名
	__DATE__表示编译时候的日期
	__TIME__表示编译时的时间
	__STDC__当它被定义后，编译器将按照ansic标准来编译你的c程序