文件输入输出
	用>和<做重定向

FILE

FILE  *fopen（const char *restrict  path,const char *restrict mode）;

int fclose(FILE  *stream);

fscanf(FILE  *,...)//文件写

fprintf(FILE  *,...)//文件读


打开文件的标准代码//fopen函数是打开指定文件，两个参数中，"file"是文件名，“r”是读这个文件
	FILE  *fp  = fopen("file","r")//*fp是一个指针变量，指向FILE。如果打不开这个文件则返回一个NULL
		if(fp)//如果可以打开
		   fscanf(fp,..);
		   fclose(fp);//关掉该文件
		}else  {//如果打不开，则要告诉用户原因
		   ...
		}	



程序的输入/输出概念
	所有处理的数据都保存在内存中，以内存为基点，当将数据保存
到内存中时，称为数据输入；而将内存中的数据转移到其他设备时，称为数据输出。

	在C语言中，无论是输入设备（向程序提供数据）还是输出设备（输出程序中数据），都采用流的方式来进行输入输出操作
	
流的概念
	C语言输入输出要使用各种设备，而它本身提供了缓冲文件系统，将每种设备
都转换为称为流的逻辑设备
	流是一个数据字节序列。流入程序的流称为输入流，从程序流出的流称为输出流
	使用流的主要优点是：程序的输入/输出是独立于 设备的，程序员不需要针对每种输入输出设备编写专用的输出输入函数
	
	共有两类流：
	文本流是一种字符序列，只包含字符。例如显示到屏幕上的输出就是一种文本流。
文本流按行组织，对于一些特殊的字符（如换行符）有特殊的含义
	
	二进制流是一种字节序列，与外设中的字节序列一一对应，不对字节中的内容进行转换


文件的打开与关闭
	使用fopen打开文件
		代码示例：
			 FILE  *file；
			file  =  fopen("文件名"，“文件使用方式”)；

	文件的打开方式（又说使用方式）

		文件的打开模式，可使用由r、w,a,t,b,+6个字符的组合。

		r(read)：读，若文件不存在，则将报告一个错误

		w(write):写，若文件存在，则将清空文件原有内容；若文件不存在，则将创建该文件。

		a(append)：追加，在原文件尾部追加内容，若原文件不存在，则将创建该文件。

		t(text):文本文件，按文本文件模式打开

		b（binary）:二进制文件，按二进制文件模式打开
		+：读和写，打开的文件即可读又可写

		打开模式			含义
		rt			以只读模式打开一个文本文件，只允许从文件中读取数据

		wt		 	以只写模式打开或建立一个文本文件，只允许向文件中写入数据

		at			以追加模式打开一个文本文件，可向文件末尾写入数据

		rt+			以读写模式打开一个文件，可从文件中读取数据，也可向文件中写入数据

		wt+			以读写模式打卡或建立文本文件，可从文件中读取数据，也可向文件中写入数据

		at+			以读写模式打开一个文本文件，可从文件中读取数据，也可在文件末尾追加数据

		rb			以只读模式打开一个二进制文件，只允许从文件中读取数据

		wb			以只写模式打开一个二进制文件，只允许向文件中写入数据

		ab			以追加模式打开一个二进制文件，可向文件末尾写入数据
		
		rb+			以读写模式打开一个二进制文件，可从文件中读取数据，也可从文件中写入数据

		wb+			以读写模式打开或建立一个二进制文件，可从文件中读取数据，也可向文件中写入数据

		ab+			以读写模式打开一个二进制文件，可从文件中读取数据，也可在文件末尾追加数据

		
		文件名

			参数filename中可以包含路径信息。在DOS和Windows操作系统中，
使用反斜线来分隔路径。例如：
			c:\dev c++\prg\test.txt
			表示C盘dev c++文件下prg子文件中的test.txt

			以下表示是错误的
			fp =fopen("c:\\dev c++\\prg\\test.txt","w")

			在程序代码中输入文件名时的分隔符需采用以下形式
			fp =fopen("c:\dev c++\prg\test.txt","w")

		
			
		关闭文件函数fclose()
			其原型在stdio.h的头文件中，其形式如下：
			  int fclose(FILE*   fp)
			参数fp为一个FILE结构的指针，表示需要关闭的文件
				例如：
					fclose(fp)
					 正常关闭文件操作时，fclose()函数的返回值为0
				
			如果要关闭多个打开的文件，则可以使用fcloseall()函数，其函数原型：
				int fcloseall(void)
				fcloseall函数不需要用参数指明需要关闭的文件，因为该函数将关闭所有打开的文件。
			
		写入字符函数  putc()和fputc()
			int putc(int ch,FILE*  fp);
			int  fputc(int ch,FILE* fp);
			ch是被写入文件的字符，参数fp是使用fopen函数返回的文件指针。
			例如：
				fputc('w',fp);//用于将字符w写入fp所指向的文件
		
		
			